# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page

#registration
GET         /:event/register                               controllers.Registration.registration(event)
GET         /:event/register_by_user                       controllers.Registration.registrationByUser(event)
GET         /:event/:role/register                         controllers.Registration.roleRegistration(event, role)
GET         /:event/:role/register_by_user                 controllers.Registration.roleRegistrationByUser(event, role)
POST        /:event/:role/register                         controllers.Registration.doRegistration(event, role)
POST        /:event/:role/register_by_user                 controllers.Registration.doRegistrationByUser(event, role)

#other user actions
GET         /:event/registered/:uuid                       controllers.Registration.waitForEmail(event, uuid, passwordRecovery:Boolean=false)
GET         /:event/recovered/:uuid                        controllers.Registration.waitForEmail(event, uuid, passwordRecovery:Boolean=true)
GET         /:event/confirm/:uuid                          controllers.Registration.confirmRegistration(event, uuid, passwordRecovery:Boolean=false)
GET         /:event/recover/:uuid                          controllers.Registration.confirmRegistration(event, uuid, passwordRecovery:Boolean=true)
GET         /:event/login                                  controllers.Registration.login(event)
POST        /:event/login                                  controllers.Registration.doLogin(event)
GET         /:event/remind                                 controllers.Registration.passwordRemind(event)
POST        /:event/remind                                 controllers.Registration.doPasswordRemind(event)
GET         /:event/logout                                 controllers.Registration.logout(event)

#user info
GET         /:event/user_info                              controllers.UserInfo.info(event)
POST        /:event/user_info                              controllers.UserInfo.doChangeInfo(event)
GET         /:event/contests                               controllers.UserInfo.contestsList(event)

#contest
GET         /:event/:contest/start                         controllers.Contests.startContest(event, contest)
GET         /:event/:contest/go                            controllers.Contests.contest(event, contest)
POST        /:event/:contest/submit                        controllers.Contests.submit(event, contest)
POST        /:event/:contest/stop                          controllers.Contests.stop(event, contest)
POST        /:event/:contest/restart                       controllers.Contests.restart(event, contest)

#admin event
GET         /:event/admin                                  controllers.EventAdministration.admin(event)
POST        /:event/admin                                  controllers.EventAdministration.doChangeEvent(event)
GET         /:event/:table/csv_table                       controllers.EventAdministration.csvTable(event, table:Integer)
GET         /:event/:contest/:table/csv_table              controllers.EventAdministration.csvTableForContest(event, contest, table:Integer)
#GET         /:event/registeredUsers                                 controllers.EventAdministration.getUsers(event, appendResults:Integer = 0)
#GET         /:event/usersWithResults                                controllers.EventAdministration.getUsers(event, appendResults:Integer = 1)
#GET         /:event/usersWithResults2                               controllers.EventAdministration.getUsers(event, appendResults:Integer = 2)
#GET         /:event/usersAnswers                                    controllers.EventAdministration.getUsersAnswers(event)
#GET         /:event/usersActivity                                   controllers.EventAdministration.getUsersActivity(event)
#GET         /:event/usersMatrix                                     controllers.EventAdministration.getUsersMatrix(event)
#GET         /:event/evalScores                                      controllers.EventAdministration.evalScores(event)
POST        /:event/add_contest                            controllers.EventAdministration.addContest(event)
GET         /:event/help                                   controllers.EventAdministration.help(event)
#html block
POST        /~global/:block/set_html_block                 controllers.Application.setGlobalHtmlBlock(block)
POST        /:event/:block/set_html_block                  controllers.EventAdministration.setHtmlBlock(event, block)

#admin contest
GET         /:event/:contest/contest_admin                 controllers.ContestAdministration.contestAdmin(event, contest)

POST        /:event/:contest/contest_up                    controllers.ContestAdministration.moveContestUp(event, contest)
POST        /:event/:contest/contest_down                  controllers.ContestAdministration.moveContestDown(event, contest)
POST        /:event/:contest/contest_remove                controllers.ContestAdministration.removeContest(event, contest)
POST        /:event/:contest/update                        controllers.ContestAdministration.doUpdateContest(event, contest)
POST        /:event/:contest/add_block                     controllers.ContestAdministration.doAddBlock(event, contest)
POST        /:event/:contest/:index/move_block_up          controllers.ContestAdministration.moveBlockUp(event, contest, index:Integer)
POST        /:event/:contest/:index/move_block_down        controllers.ContestAdministration.moveBlockDown(event, contest, index:Integer)
POST        /:event/:contest/:index/remove_block           controllers.ContestAdministration.removeBlock(event, contest, index:Integer)

#global admin
GET         /migrate                                       controllers.Application.migrate()
GET         /:index/migrate                                controllers.Application.migrateByIndex(index:Integer)
POST        /:event/clone_event                            controllers.EventAdministration.doClone(event)
POST        /:event/remove_event                           controllers.EventAdministration.doRemoveEvent(event)

#trash
POST        /:event/upload_kenguru_codes                   controllers.EventAdministration.uploadKenguruSchoolCodes(event)
POST        /:event/:contest/upload_problems               controllers.EventAdministration.uploadProblemsFile(event, contest)

#plugins
GET         /:event/:plugin/:action/plugin                 controllers.Plugins.doGet(event, plugin, action)
POST        /:event/:plugin/:action/post_plugin            controllers.Plugins.doPost(event, plugin, action)

#debug
#TODO: 1) create controller intention, 2) TODO highlight. 3) Create method intention shows up even if there is no controller 4) autoimport play.mvc.Result
#TODO report. comment in the normal line is not highlighted as an error, but it does not work
GET         /:action/debug                                 controllers.Debug.debug(action)

# Map static resources from the /public folder to the /assets URL path
GET         /assets/*file                                  controllers.Assets.at(path="/public", file)

# + TODO debug submission
# + TODO load problems
# + TODO add contest
# + TODO remove contest
# + TODO add user
# + TODO registered users
# + TODO клонировать соревнования, клонировать только с клонировавшим пользователем
# + TODO make help as extra page
# + TODO распихать побольше редактируемых блоков по страницам

# TODO final rating
# TODO Extra pages
# TODO при загрузке bbtc задач удалять стаые или просто сделать возможность удалить все задачи соревнования (каталога)
# TODO подумать, куда еще распихать редактируемые блоки

# TODO remove user

# TODO max scores evaluation (several translators)
# TODO интерфейс
# TODO режим соревнования, что оно окончилось, но к задачам уже не перейти

# TODO redirect() instead of ok() for each POST

# Тип результа
# Не отображать список ответов для пользователя